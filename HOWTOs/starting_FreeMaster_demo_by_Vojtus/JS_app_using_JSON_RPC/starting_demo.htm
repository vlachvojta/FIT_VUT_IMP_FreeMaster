<!--
Copyright 2019-2022 NXP

SPDX-License-Identifier: BSD-3-Clause

example.htm: JSON-RPC example
-->

<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">
<meta http-equiv="Cache-Control" content="no-store" />
<html>
<head>
    <link rel="icon" href="nxp_logo.png">
    <!-- Get the  information object named "FreeMASTER" (needs version 3.1.3 and above) -->
    <script type="text/javascript" src="fmstr://localapp/info.js"></script>

    <!-- load JSON-RPC and FreeMASTER wrapper object -->
    <script type="text/javascript" src="./simple-jsonrpc-js.js"></script>
    <script type="text/javascript" src="./freemaster-client.js"></script>
    
    <script type="text/javascript">
    var pcm;  // the main FreeMASTER communication object

    function main()
    {
        console.log("This is start of MAIN.")
        /* Desktop FreeMASTER listens on port 41000 by default, unless this is
         * overridden on command line using /rpcs option. FreeMASTER Lite 
         is configurable. */

        // default address
        var rpcs_addr = "localhost:41000";

        // freemaster 3.1.3 and above provides the info about itself:
        if(typeof(FreeMASTER) != "undefined")
        {
            rpcs_addr = FreeMASTER.rpcs_addr;

            // also provide some information about this session
            fmstr_info.innerHTML = "FreeMASTER version: " + FreeMASTER.version + "<br>" +
                "JSON-RPC server address: " + FreeMASTER.rpcs_addr + "<br>";
        }

        pcm = new PCM(rpcs_addr, on_connected, on_error, on_error);
        pcm.OnServerError = on_error;
        pcm.OnSocketError = on_error;   
    }

    function on_connected() 
    {
        /* Typically, you want to enable events to make use of the full API 
         * provided by desktop application. */
        //pcm.EnableEvents(true);
        setInterval(timer, 500);
        console.log("Timer started, probably...");
    }

    function timer() {
        // console.log("Tick-tock...")
        read_variable('GPIOB_PDOR', 'GPIOB_PDOR_read')
        read_variable('LEDs', 'LEDs_read')
        // pcm.ReadVariable("var16")
        //     .then((response) => var16_read.innerText = response.data)
        //     .catch((err) => var16_read.innerText = "ERROR: " + JSON.stringify(error))
    }

    // function start_tick_tock(){
    //     setInterval(tick_tock, 1000)
    // }

    
    function on_error(err) 
    {
        /* Erors are reported in the status field. */
        document.getElementById("status").innerHTML = err;
    }

    async function tick_tock() {
        read_variable('LEDs', 'LEDs_read');
        var value = parseInt(document.getElementById('LEDs_read').innerHTML);
        write_value('LEDs', (value + 1) % 16);
        read_variable('LEDs', 'LEDs_read');
    }
    
    // async function read_variable_and_return(name)
    // {
    //     /* ReadVariable uses FreeMASTER variable object from current project. Use 
    //      * ReadUIntVariable to access the memory directly using a symbol name. */
    //     return new pcm.ReadVariable(name)
    //         .then((value) => { 
    //             return value.data;
    //         })
    //         .catch((err) => { 
    //             on_error(err.msg);
    //             return 0;
    //         });
    // }
    
    function read_variable(name, span_id)
    {
        /* ReadVariable uses FreeMASTER variable object from current project. Use 
         * ReadUIntVariable to access the memory directly using a symbol name. */
        return pcm.ReadVariable(name)
            .then((value) => { 
                document.getElementById(span_id).innerHTML = value.data;
            })
            .catch((err) => { 
                on_error(err.msg);
            });
    }
    
    function read_array(name, elemSize, length, span_id)
    {
        /* Arrays are accessed in memory directly, using a symbol name and element size.  */
        pcm.ReadUIntArray(name, length, elemSize)
            .then((value) => { 
                document.getElementById(span_id).innerHTML = "";
                for(i=0; i<value.data.length; i++)
                    document.getElementById(span_id).innerHTML += value.data[i] + ", ";
            })
            .catch((err) => { 
                on_error(err.msg);
            });
    }
    
    function write_variable(name, input_id)
    {
        var val = document.getElementById(input_id).value;

        /* WriteVariable uses FreeMASTER variable object from current project. Use 
         * WriteUIntVariable to access the memory directly using a symbol name. */
        pcm.WriteVariable(name, val)
            .then(() => { 
                document.getElementById("status").innerHTML = "Write of the " + name + " succeeded.";
            })
            .catch((err) => { 
                on_error(err.msg);
            });  
    }

    function write_value(name, value)
    {
        /* WriteVariable uses FreeMASTER variable object from current project. Use 
         * WriteUIntVariable to access the memory directly using a symbol name. */
        pcm.WriteVariable(name, value)
            .then(() => { 
                document.getElementById("status").innerHTML = "Write of the " + name + " succeeded.";
            })
            .catch((err) => { 
                on_error(err.msg);
            });  
    }
    
    </script>
</head>
<body onload="main()">
    <!-- User form -->
    Read GPIOB_PDOR = <span id="GPIOB_PDOR_read">N/A</span> <!-- <input type="button" value="Read" onclick="read_variable('GPIOB_PDOR', 'GPIOB_PDOR_read')" /> --> <br />
    Read LEDs = <span id="LEDs_read">N/A</span> <!-- <input type="button" value="Read" onclick="read_variable('GPIOB_PDOR', 'GPIOB_PDOR_read')" /> --> <br />
    <!-- Read var16inc = <span id="var16inc_read">N/A</span> <input type="button" value="Read" onclick="read_variable('var16inc', 'var16inc_read')" /> <br /> -->
    <!-- Read arr16 = <span id="arr16_read">N/A</span> <input type="button" value="Read" onclick="read_array('arr16', 2, 10, 'arr16_read')" /> <br /> -->
    Write LEDs: <input type="text" id="LEDs_val" value="10" /> <input type="button" value="Write" onclick="write_variable('LEDs', 'LEDs_val')" /> <br />
    Status: <span id="status">No errors.</span> <br />

    <input id="'start_tick_tock_btn" type="button" value="Start tick tock" onclick="setInterval(tick_tock, 250)">

    <hr>
    <span id="fmstr_info"></span>

</body>
</html>
